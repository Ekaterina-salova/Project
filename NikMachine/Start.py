from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (MessageHandler, filters, CommandHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes)
import re
from Send_sms import send_data, send_all

NAME, SERVICE, STATUS, WAY, NUMBER = range(5)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.from_user is not None:
        user = update.message.from_user.id
        username = update.message.from_user.username or "–±–µ–∑ username"

        admin_chat_id = 358487602
        await context.bot.send_message(
            chat_id=admin_chat_id,
            text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —á–∞—Ç:\n"
                 f"ID: {user}\n"
                 f"Username: @{username}"
        )

        await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è):"
            "(–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤)")
        return NAME
        


async def check_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.text is None or context.user_data is None:
        return ConversationHandler.END
    
    name = update.message.text.strip()
    if update.message.from_user is None:
        return ConversationHandler.END
    username = update.message.from_user.username or "–±–µ–∑ username"
    await send_data(username, 'name', name, context)
    parts = name.split()
    
    if len(parts) > 1:
        first_name = parts[0]
    else:
        first_name = name

    context.user_data["name"] = name
    context.user_data["first_name"] = first_name
    keyboard = [
        [InlineKeyboardButton("üöó –ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data="car_selection")],
        [InlineKeyboardButton("üöô –ü–æ–¥–±–æ—Ä + –≤—ã–µ–∑–¥ –Ω–∞ –æ—Å–º–æ—Ç—Ä", callback_data="check_out")],
        [InlineKeyboardButton("üìù –ü–æ–º–æ—â—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data="car_registration")],
        [InlineKeyboardButton("üíº –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ—Ñ–∏–Ω–∞–Ω—Å–∞–º", callback_data="consultation")],
        [InlineKeyboardButton("‚ùì –î—Ä—É–≥–æ–µ", callback_data="other")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(f"–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å, {first_name}! \n–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?",
                                    reply_markup=reply_markup)
    return SERVICE
    


async def check_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return ConversationHandler.END
    if context.user_data is None:
        return ConversationHandler.END
    user = query.from_user
    if user is None:
        return ConversationHandler.END
    username = user.username or "–±–µ–∑ username"
    

    await query.answer()

    if query.data == "car_selection":
        context.user_data["service"] = '–ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è'
        await send_data(username, 'service', '–ü–æ–¥–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è', context)
    elif query.data == "check_out":
        context.user_data["service"] = '–ü–æ–¥–±–æ—Ä + –≤—ã–µ–∑–¥ –Ω–∞ –æ—Å–º–æ—Ç—Ä'
        await send_data(username, 'service', '–ü–æ–¥–±–æ—Ä + –≤—ã–µ–∑–¥ –Ω–∞ –æ—Å–º–æ—Ç—Ä', context)
    elif query.data == "car_registration":
        context.user_data["service"] = '–ü–æ–º–æ—â—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è'
        await send_data(username, 'service', '–ü–æ–º–æ—â—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—è', context)
    elif query.data == "consultation":
        context.user_data["service"] = '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é, –ª–∏–∑–∏–Ω–≥—É –∏–ª–∏ –∫—Ä–µ–¥–∏—Ç—É'
        await send_data(username, 'service', '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é, –ª–∏–∑–∏–Ω–≥—É –∏–ª–∏ –∫—Ä–µ–¥–∏—Ç—É', context)
    elif query.data == "other":
        context.user_data["service"] = '–î—Ä—É–≥–æ–µ'
        await send_data(username, 'service', '–î—Ä—É–≥–æ–µ', context)

    keyboard = [
        [InlineKeyboardButton("üÜò –ë–µ–∂–µ–Ω–µ—Ü", callback_data="refugee")],
        [InlineKeyboardButton("üìÑ –í–ù–ñ (—É—á—ë–±–∞, —Ä–∞–±–æ—Ç–∞, –∂–∏–≤–Ω–æ—Å—Ç—å)", callback_data="vnz")],
        [InlineKeyboardButton("üè† –ü–ú–ñ", callback_data="pmz")],
        [InlineKeyboardButton("üõ°Ô∏è –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ", callback_data="citizenship")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à —Å—Ç–∞—Ç—É—Å –≤ –°–ª–æ–≤–∞–∫–∏–∏ / –ï–°:",
                                  reply_markup=reply_markup)
    return STATUS
    


async def check_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return ConversationHandler.END
    if context.user_data is None:
        return ConversationHandler.END
    user = query.from_user
    if user is None:
        return ConversationHandler.END
    username = user.username or "–±–µ–∑ username"

    await query.answer()

    if query.data == "refugee":
        context.user_data["status"] = '–ë–µ–∂–µ–Ω–µ—Ü'
        await send_data(username, 'status', '–ë–µ–∂–µ–Ω–µ—Ü', context)
    elif query.data == "vnz":
        context.user_data["status"] = '–í–ù–ñ (—É—á—ë–±–∞, —Ä–∞–±–æ—Ç–∞, –∂–∏–≤–Ω–æ—Å—Ç—å)'
        await send_data(username, 'status', '–í–ù–ñ (—É—á—ë–±–∞, —Ä–∞–±–æ—Ç–∞, –∂–∏–≤–Ω–æ—Å—Ç—å)', context)
    elif query.data == "pmz":
        context.user_data["status"] = '–ü–ú–ñ'
        await send_data(username, 'status', '–ü–ú–ñ', context)
    elif query.data == "citizenship":
        context.user_data["status"] = '–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ'
        await send_data(username, 'status', '–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ', context)

    keyboard = [
        [InlineKeyboardButton("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram / WhatsApp", callback_data="telegram")],
        [InlineKeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫", callback_data="call")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –¥–ª—è –≤–∞—Å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ?",
                                  reply_markup=reply_markup)
    return WAY
    


async def check_way(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return ConversationHandler.END
    if context.user_data is None:
        return ConversationHandler.END
    user = query.from_user
    if user is None:
        return ConversationHandler.END
    username = user.username or "–±–µ–∑ username"

    await query.answer()

    if query.data == "telegram":
        context.user_data["way"] = '–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram / WhatsApp'
        await send_data(username, 'way', '–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram / WhatsApp', context)
    elif query.data == "call":
        context.user_data["way"] = '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫'
        await send_data(username, 'way', '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫', context)

    await query.edit_message_text(
            "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n" 
            "–ü—Ä–∏–º–µ—Ä: `+4219xxxxxxxx`.",
            parse_mode="Markdown")
    return NUMBER
    


async def check_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.text is None or context.user_data is None:
        return ConversationHandler.END
    if update.message.from_user is None:
        return ConversationHandler.END
    username = update.message.from_user.username or "–±–µ–∑ username"

    number = update.message.text.strip()

    if not re.fullmatch(r"\+\d{10,12}", number):
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `+421912345678`",
            parse_mode="Markdown"
        )
        return NUMBER

    first_name = context.user_data.get("first_name")
    name = context.user_data.get("name")
    service = context.user_data.get("service")
    status = context.user_data.get("status")
    way = context.user_data.get("way")
    await send_all(username, str(name), str(service), str(status), str(way), number, context)

    await update.message.reply_text(f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É, {first_name}!\n"
                                    "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                                    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
    return ConversationHandler.END
    

conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_name)],
        SERVICE: [CallbackQueryHandler(check_service, pattern=r"^(car_selection|check_out|car_registration|consultation|other)$")],
        STATUS: [CallbackQueryHandler(check_status, pattern=r"^(refugee|vnz|pmz|citizenship)$")],
        WAY: [CallbackQueryHandler(check_way, pattern=r"^(telegram|call)$")],
        NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_number)],
    },
    fallbacks=[],
    per_message=False
)